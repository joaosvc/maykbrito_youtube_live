"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Reconnex_connectionOpenned, _Reconnex_sendOnConnectStrings, _Reconnex_reconnectOpts, _Reconnex_pingOpts, _Reconnex_currentRetries, _Reconnex_ws, _Reconnex_url, _Reconnex_options;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reconnex = void 0;
var runningOnNodejs = (typeof process !== 'undefined' && process.versions && process.versions.node);
const events_1 = __importDefault(require("events"));
const sleep = (time = 1000) => new Promise(resolve => setTimeout(resolve, time));
class Reconnex extends events_1.default {
    constructor({ url, ping, reconnect, options }) {
        super();
        _Reconnex_connectionOpenned.set(this, false);
        _Reconnex_sendOnConnectStrings.set(this, []);
        _Reconnex_reconnectOpts.set(this, {
            maxAttempts: 10,
            connectTimeout: 5 * 1000,
        });
        _Reconnex_pingOpts.set(this, {
            data: null,
            interval: 60 * 1000,
        });
        _Reconnex_currentRetries.set(this, 0);
        _Reconnex_ws.set(this, null);
        _Reconnex_url.set(this, void 0);
        _Reconnex_options.set(this, void 0);
        this.disconnect = (reason) => { var _a; (_a = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _a === void 0 ? void 0 : _a.close(4452, reason); };
        this.open = () => !__classPrivateFieldGet(this, _Reconnex_connectionOpenned, "f") && this.connect();
        this.send = (text) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            yield this.waitTwitchWSConnected();
            (_b = (_a = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _a === void 0 ? void 0 : _a.send) === null || _b === void 0 ? void 0 : _b.call(_a, text);
            this.emit('send', text.toString());
        });
        this.json = (data) => __awaiter(this, void 0, void 0, function* () {
            var _c, _d;
            yield this.waitTwitchWSConnected();
            (_d = (_c = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _c === void 0 ? void 0 : _c.send) === null || _d === void 0 ? void 0 : _d.call(_c, JSON.stringify(data));
            this.emit('send', JSON.stringify(data));
        });
        this.sendJSONBinary = (data) => __awaiter(this, void 0, void 0, function* () {
            var _e;
            yield this.waitTwitchWSConnected();
            var encoder = new TextEncoder();
            (_e = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _e === void 0 ? void 0 : _e.send(encoder.encode(JSON.stringify(data)));
        });
        this.sendOnConnect = (content) => {
            if (content) {
                __classPrivateFieldGet(this, _Reconnex_sendOnConnectStrings, "f").push(content);
                if (this.isConnected())
                    this.send(content);
            }
            return __classPrivateFieldGet(this, _Reconnex_sendOnConnectStrings, "f");
        };
        this.removeSendOnConnect = (content) => {
            const index = __classPrivateFieldGet(this, _Reconnex_sendOnConnectStrings, "f").indexOf(content);
            __classPrivateFieldGet(this, _Reconnex_sendOnConnectStrings, "f").splice(index, 1);
            return __classPrivateFieldGet(this, _Reconnex_sendOnConnectStrings, "f");
        };
        this.isConnected = () => { var _a; return ((_a = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _a === void 0 ? void 0 : _a.readyState) == 1; };
        if (ping)
            __classPrivateFieldSet(this, _Reconnex_pingOpts, Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Reconnex_pingOpts, "f")), ping), "f");
        if (reconnect)
            __classPrivateFieldSet(this, _Reconnex_reconnectOpts, Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Reconnex_reconnectOpts, "f")), reconnect), "f");
        __classPrivateFieldSet(this, _Reconnex_url, url, "f");
        __classPrivateFieldSet(this, _Reconnex_options, options, "f");
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    connect() {
        const _WebSocket = !runningOnNodejs ? window === null || window === void 0 ? void 0 : window.WebSocket : require('ws');
        __classPrivateFieldSet(this, _Reconnex_ws, new _WebSocket(__classPrivateFieldGet(this, _Reconnex_url, "f"), __classPrivateFieldGet(this, _Reconnex_options, "f")), "f");
        this.addWSListeners();
        return __classPrivateFieldGet(this, _Reconnex_ws, "f");
    }
    addWSListeners() {
        var _a, _b, _c, _d;
        let intervalPing;
        (_a = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _a === void 0 ? void 0 : _a.addEventListener('open', () => {
            var _a;
            __classPrivateFieldSet(this, _Reconnex_currentRetries, 0, "f");
            __classPrivateFieldSet(this, _Reconnex_connectionOpenned, true, "f");
            __classPrivateFieldGet(this, _Reconnex_sendOnConnectStrings, "f").forEach(data => this.send(data));
            if ((_a = __classPrivateFieldGet(this, _Reconnex_pingOpts, "f")) === null || _a === void 0 ? void 0 : _a.data) {
                intervalPing = setInterval(() => {
                    var _a;
                    if ((_a = __classPrivateFieldGet(this, _Reconnex_pingOpts, "f")) === null || _a === void 0 ? void 0 : _a.data)
                        this.send(__classPrivateFieldGet(this, _Reconnex_pingOpts, "f").data);
                }, __classPrivateFieldGet(this, _Reconnex_pingOpts, "f").interval);
            }
            this.emit('open', __classPrivateFieldGet(this, _Reconnex_url, "f"));
        });
        (_b = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _b === void 0 ? void 0 : _b.addEventListener('error', (err) => {
            this.emit('error', err);
        });
        (_c = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _c === void 0 ? void 0 : _c.addEventListener('message', (buffer) => {
            this.emit('message', buffer);
            try {
                this.emit('text', new TextDecoder().decode(buffer.data));
            }
            catch (e) {
                this.emit('text', buffer.data);
            }
        });
        (_d = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _d === void 0 ? void 0 : _d.addEventListener('close', ({ code, reason }) => __awaiter(this, void 0, void 0, function* () {
            var _e;
            clearInterval(intervalPing);
            __classPrivateFieldSet(this, _Reconnex_currentRetries, (_e = __classPrivateFieldGet(this, _Reconnex_currentRetries, "f"), _e++, _e), "f");
            this.emit('close', code, reason.toString());
            if (code !== 4452) {
                if (__classPrivateFieldGet(this, _Reconnex_currentRetries, "f") <= __classPrivateFieldGet(this, _Reconnex_reconnectOpts, "f").maxAttempts || __classPrivateFieldGet(this, _Reconnex_reconnectOpts, "f").maxAttempts == -1) {
                    yield sleep(__classPrivateFieldGet(this, _Reconnex_reconnectOpts, "f").connectTimeout);
                    this.emit('retry', __classPrivateFieldGet(this, _Reconnex_currentRetries, "f"), __classPrivateFieldGet(this, _Reconnex_reconnectOpts, "f").maxAttempts == -1 ? Infinity : __classPrivateFieldGet(this, _Reconnex_reconnectOpts, "f").maxAttempts);
                    this.connect();
                }
                else {
                    this.emit('max_attempt');
                }
            }
            else {
                __classPrivateFieldSet(this, _Reconnex_connectionOpenned, false, "f");
            }
        }));
    }
    waitTwitchWSConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                setInterval(() => {
                    var _a;
                    if (((_a = __classPrivateFieldGet(this, _Reconnex_ws, "f")) === null || _a === void 0 ? void 0 : _a.readyState) == 1)
                        resolve(true);
                }, 10);
            });
        });
    }
}
exports.Reconnex = Reconnex;
_Reconnex_connectionOpenned = new WeakMap(), _Reconnex_sendOnConnectStrings = new WeakMap(), _Reconnex_reconnectOpts = new WeakMap(), _Reconnex_pingOpts = new WeakMap(), _Reconnex_currentRetries = new WeakMap(), _Reconnex_ws = new WeakMap(), _Reconnex_url = new WeakMap(), _Reconnex_options = new WeakMap();
