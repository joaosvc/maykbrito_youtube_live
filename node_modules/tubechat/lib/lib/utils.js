"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractCurrencyValue = exports.filterAndExtractSubGiftNames = exports.createBadgesElements = exports.parseThumbnailToImageItem = exports.convertColorToHex6 = exports.compactMessage = exports.parseMessages = exports.findKey = exports.sleep = exports.getStr = void 0;
function getStr(string, start, end) {
    var str;
    var canSplit = function (str, token) {
        return (str || '').split(token).length > 1;
    };
    if (canSplit(string, start)) {
        str = string.split(start);
        if (end) {
            str = str[1].split(end);
            return str[0];
        }
        else {
            return str = str[1];
        }
    }
    else {
        return "";
    }
}
exports.getStr = getStr;
function sleep(time) {
    return new Promise((resolve) => {
        setTimeout(resolve, time);
    });
}
exports.sleep = sleep;
function findKey(obj, key) {
    for (const k in obj) {
        if (k === key) {
            return obj[k];
        }
        if (typeof obj[k] === 'object') {
            const value = findKey(obj[k], key);
            if (value) {
                return value;
            }
        }
    }
    return null;
}
exports.findKey = findKey;
function parseMessages(runs) {
    return runs.map((run) => {
        if (!(run === null || run === void 0 ? void 0 : run.emoji)) {
            return run; // no time bro
        }
        else {
            const thumbnail = run.emoji.image.thumbnails.shift();
            const isCustomEmoji = Boolean(run.emoji.isCustomEmoji);
            const shortcut = run.emoji.shortcuts ? run.emoji.shortcuts[0] : "";
            return {
                url: thumbnail ? thumbnail.url : "",
                alt: shortcut,
                isCustomEmoji: isCustomEmoji,
                emojiText: isCustomEmoji ? shortcut : run.emoji.emojiId
            };
        }
    });
}
exports.parseMessages = parseMessages;
function compactMessage(message) {
    const result = [];
    let currentGroup = null;
    if (!message)
        return;
    for (const element of message) {
        if (element && "text" in element) {
            if (!currentGroup) {
                currentGroup = { text: element.text };
            }
            else {
                currentGroup.text += " " + element.text;
            }
        }
        else {
            if (currentGroup) {
                result.push(currentGroup);
                currentGroup = null;
            }
            result.push(element);
        }
    }
    if (currentGroup) {
        result.push(currentGroup);
    }
    return result;
}
exports.compactMessage = compactMessage;
function convertColorToHex6(colorNum) {
    return `#${colorNum.toString(16).slice(2).toLocaleUpperCase()}`;
}
exports.convertColorToHex6 = convertColorToHex6;
function parseThumbnailToImageItem(data, alt) {
    const thumbnail = data.pop();
    if (thumbnail) {
        return {
            url: thumbnail.url,
            alt: alt,
        };
    }
    else {
        return {
            url: "",
            alt: "",
        };
    }
}
exports.parseThumbnailToImageItem = parseThumbnailToImageItem;
function createBadgesElements(thumbnails, tooltip) {
    let badges = {};
    if (thumbnails) {
        badges.thumbnail = parseThumbnailToImageItem(thumbnails, tooltip);
        badges.label = tooltip;
    }
    return badges;
}
exports.createBadgesElements = createBadgesElements;
function filterAndExtractSubGiftNames(giftRuns) {
    const newArray = [];
    for (let i = 2; i < giftRuns.length - 1; i++) {
        if (giftRuns[i].text.trim() !== "") {
            newArray.push(giftRuns[i].text);
        }
    }
    return newArray;
}
exports.filterAndExtractSubGiftNames = filterAndExtractSubGiftNames;
function extractCurrencyValue(value) {
    const currencyMatch = value.match(/[A-Z$€¥£]+/);
    const cleanedValue = parseFloat(value.replace(/[^\d.]/g, ''));
    if (!currencyMatch) {
        console.error("Unable to identify the currency.", value);
        return {
            amount: cleanedValue,
            currency: ''
        };
    }
    return {
        amount: cleanedValue,
        currency: currencyMatch[0],
    };
}
exports.extractCurrencyValue = extractCurrencyValue;
