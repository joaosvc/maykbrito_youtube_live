"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatPoolChoices = exports.createCommonUserResponse = void 0;
const utils_1 = require("../utils");
function createCommonUserResponse(messageData) {
    var _d, _e, _f, _g;
    var _a, _b, _c;
    const { authorName, authorPhoto = { thumbnails: [] }, timestampUsec, authorExternalChannelId, id, authorBadges, message, } = messageData;
    const authorNameText = (_b =
        (_a = authorName) === null || _a === void 0 ? void 0 : _a.simpleText) !==
        null && _b !== void 0
        ? _b
        : "";
    const liveChatAuthorBadgeRenderer = authorBadges === null || authorBadges === void 0 ? void 0 : authorBadges[0].liveChatAuthorBadgeRenderer;
    let badges = {};
    if ((_d = liveChatAuthorBadgeRenderer === null || liveChatAuthorBadgeRenderer === void 0 ? void 0 : liveChatAuthorBadgeRenderer.customThumbnail) === null || _d === void 0 ? void 0 : _d.thumbnails) {
        badges = (0, utils_1.createBadgesElements)(liveChatAuthorBadgeRenderer === null || liveChatAuthorBadgeRenderer === void 0 ? void 0 : liveChatAuthorBadgeRenderer.customThumbnail.thumbnails, liveChatAuthorBadgeRenderer.tooltip);
    }
    function pushBadges(objectName, value) {
        badges = Object.assign(Object.assign({}, badges), { [objectName]: value });
    }
    var msg;
    if (message) {
        const messageFormated = (0, utils_1.parseMessages)(message.runs);
        msg = messageFormated.map(({ alt, emojiText, isCustomEmoji, text, url }) => {
            if (text === null || text === void 0 ? void 0 : text.trim()) {
                return { text };
            }
            if (isCustomEmoji == true) {
                return { emoji: url };
            }
            if (isCustomEmoji == false) {
                return { text: emojiText };
            }
        });
        msg = (_f = (0, utils_1.compactMessage)((_e = (0, utils_1.compactMessage)(msg)) === null || _e === void 0 ? void 0 : _e.filter(item => item))) === null || _f === void 0 ? void 0 : _f.filter(item => item);
    }
    const responseJson = {
        id,
        message: msg,
        name: authorNameText,
        thumbnail: (0, utils_1.parseThumbnailToImageItem)(authorPhoto.thumbnails, authorNameText),
        channelId: authorExternalChannelId,
        isMembership: false,
        isOwner: false,
        isVerified: false,
        isModerator: false,
        isNewMember: false,
        badges,
        color: "#bcbcbc",
        timestamp: new Date(),
    };
    if (authorBadges) {
        for (const entry of authorBadges) {
            const badge = entry.liveChatAuthorBadgeRenderer;
            if (badge.customThumbnail) {
                responseJson.isMembership = true;
                const isNewMember = badge.tooltip.includes('New');
                const subMonths = isNewMember ? 1 : parseInt((_g = badge.tooltip.split('(')[1]) === null || _g === void 0 ? void 0 : _g.split(' ')[0]);
                const multiplier = badge.tooltip.includes("month") || isNewMember ? 1 : 12;
                responseJson.isNewMember = isNewMember;
                pushBadges("subscriber", subMonths * multiplier);
            }
            else {
                const iconType = badge.icon.iconType || "";
                switch (iconType) {
                    case "OWNER":
                        responseJson.isOwner = true;
                        pushBadges("owner", 1);
                        break;
                    case "VERIFIED":
                        responseJson.isVerified = true;
                        pushBadges("verified", 1);
                        break;
                    case "MODERATOR":
                        responseJson.isModerator = true;
                        pushBadges("moderator", 1);
                        break;
                }
            }
        }
    }
    const color = responseJson.isOwner
        ? "#f35b44"
        : responseJson.isVerified
            ? "#44eef3"
            : responseJson.isModerator
                ? "#1bf232"
                : responseJson.isMembership
                    ? "#0bb819"
                    : "#bcbcbc";
    responseJson.color = color;
    responseJson.badges = badges;
    responseJson.timestamp = new Date(Number(timestampUsec) / 1000);
    return responseJson;
}
exports.createCommonUserResponse = createCommonUserResponse;
function formatPoolChoices(choices) {
    const formatedChoices = [];
    choices.map(({ voteRatio, text, votePercentage }) => {
        formatedChoices.push({
            voteRatio,
            votePercentage: votePercentage.simpleText,
            runs: text.runs
        });
    });
    return formatedChoices;
}
exports.formatPoolChoices = formatPoolChoices;
