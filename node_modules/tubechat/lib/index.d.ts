/// <reference types="node" />
import { EventEmitter } from 'stream';
import { FlowMonitor } from 'flow-monitor';
import { ZytChatEvents } from './types';
export type TubeChatT = {
    intervalChat?: number;
    flowMonitor?: FlowMonitor;
};
type TubeChatChannel = {
    user: string;
    videoId: string | null;
    continuationData?: {
        nextPage?: string;
        apiKey?: string;
        clientVersion?: string;
        clientName?: string;
    };
    shownFirstMessages: true | null;
};
export declare class TubeChat extends EventEmitter {
    #private;
    constructor(config?: TubeChatT);
    on<E extends keyof TubeChatEvents>(event: E, listener: TubeChatEvents[E]): this;
    private updateVideo;
    private channelUpdate;
    private checkerLive;
    private updateChannelData;
    private checkerChat;
    private parseChatItem;
    private chatDisconnected;
    disconnect(user: string): void;
    private checkers;
    channelList: () => TubeChatChannel[];
    connect(channel: string): void;
}
export declare function convertSymbolCurrencies(stringValue: string, customFormats?: Record<string, string>): {
    symbol: string;
    currency: string;
    value: number;
};
export type DisconnectedEvent = (channel: string, videoId: string) => void;
export type ChannelConnectedEvent = (channel: string, videoId: string) => void;
type TubeChatEvents = ZytChatEvents & {
    chat_connected: ChannelConnectedEvent;
    chat_disconnected: DisconnectedEvent;
};
export {};
