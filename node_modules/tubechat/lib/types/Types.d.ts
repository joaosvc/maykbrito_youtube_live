export type loggedInYT = "1" | "0";
export interface IYoutubeInitialDataResponse {
    code: "success";
    clientName: string;
    clientVersion: string;
    loggedIn: loggedInYT;
    params: string;
    apiKey: string;
    continuation: string;
}
export interface IYoutubeInitialDataResponseError {
    code: "error" | "chat_not_found" | "ended_event";
    message?: string;
}
export interface IYoutubeInitialData {
    contents: {
        messageRenderer: {
            text: {
                runs: {
                    text: string;
                }[];
            };
        };
        liveChatRenderer: {
            header: {
                liveChatHeaderRenderer: {
                    viewSelector: {
                        sortFilterSubMenuRenderer: {
                            subMenuItems: {
                                continuation: {
                                    reloadContinuationData: {
                                        continuation: string;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    responseContext: {
        serviceTrackingParams: [
            {
                params: {
                    key: string;
                    value: string;
                }[];
            },
            {
                params: {
                    key: string;
                    value: loggedInYT | undefined;
                }[];
            }
        ];
    };
}
export interface ISendLiveChatMessageEndpoint {
    params?: string;
}
export interface IChatThumbnail {
    "url": string;
    "width": number;
    "height": number;
}
export interface IChatAuthorBadge {
    "liveChatAuthorBadgeRenderer": {
        icon: {
            iconType: string;
        };
        "customThumbnail": {
            "thumbnails": IChatThumbnail[];
        };
        "tooltip": string;
        "accessibility": {
            "accessibilityData": {
                "label": string;
            };
        };
    };
}
export interface IChatMessage {
    "text": string;
    "emoji": {
        "emojiId": "UCqm3BQLlJfvkTsX_hvm0UmA/UHsLYLObLs6S_AOK37G4Bg";
        "shortcuts": string[];
        "searchTerms": string[];
        "image": {
            "thumbnails": IChatThumbnail[];
            "accessibility": {
                "accessibilityData": {
                    "label": string;
                };
            };
        };
        "isCustomEmoji": boolean;
    };
}
export interface IChatData {
    "authorName": {
        "simpleText": string;
    };
    "authorPhoto": {
        "thumbnails": IChatThumbnail[];
    };
    "timestampUsec": string;
    "authorExternalChannelId": string;
    "id": string;
    "authorBadges": IChatAuthorBadge[];
    "message": {
        "runs": IChatMessage[];
    };
}
export type TPossibleActions = "addChatItemAction" | "addBannerToLiveChatCommand" | "removeChatItemByAuthorAction" | "removeBannerForLiveChatCommand" | "updateLiveChatPollAction" | "closeLiveChatActionPanelAction" | "showLiveChatActionPanelAction";
export type IAddChatItemAction = {
    item: {
        liveChatTextMessageRenderer: IChatData;
        liveChatViewerEngagementMessageRenderer: any;
        liveChatPaidMessageRenderer: any;
        liveChatPaidStickerRenderer: any;
        liveChatSponsorshipsGiftRedemptionAnnouncementRenderer: any;
        liveChatMembershipItemRenderer: any;
        liveChatSponsorshipsGiftPurchaseAnnouncementRenderer: any;
        liveChatPlaceholderItemRenderer?: any;
        liveChatTickerPaidMessageItemRenderer?: any;
    };
};
export interface YTChatBadges {
    thumbnail?: {
        url: string;
        alt: string;
    };
    label?: string;
    subscriber?: 0 | 1;
    owner?: 0 | 1;
    verified?: 0 | 1;
    moderator?: 0 | 1;
}
export interface IMessageParsed {
    text?: string;
    url?: string;
    alt?: string;
    isCustomEmoji?: boolean;
    emojiText?: string;
}
