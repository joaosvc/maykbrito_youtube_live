"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTwitchData = void 0;
const utils_1 = require("./utils");
const fetchTwitchData = (channel, headers) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    const postBody = [
        {
            "operationName": "PlaybackAccessToken",
            "variables": {
                "isLive": true,
                "login": channel,
                "isVod": false,
                "vodID": "",
                "playerType": "site"
            },
            "extensions": {
                "persistedQuery": {
                    "version": 1,
                    "sha256Hash": "3093517e37e4f4cb48906155bcd894150aef92617939236d2508f3375ab732ce"
                }
            }
        },
        {
            "operationName": "PlayerTrackingContextQuery",
            "variables": {
                "channel": channel,
                "isLive": true,
                "hasCollection": false,
                "collectionID": "",
                "videoID": "",
                "hasVideo": false,
                "slug": "",
                "hasClip": false
            },
            "extensions": {
                "persistedQuery": {
                    "version": 1,
                    "sha256Hash": "f8cf144bd3a96f628b0955799b689ddaf0d9f3f1155941ae6483083e421e3027"
                }
            }
        },
        {
            "operationName": "NielsenContentMetadata",
            "variables": {
                "isCollectionContent": false,
                "isLiveContent": true,
                "isVODContent": false,
                "collectionID": "",
                "login": channel,
                "vodID": ""
            },
            "extensions": {
                "persistedQuery": {
                    "version": 1,
                    "sha256Hash": "2dbf505ee929438369e68e72319d1106bb3c142e295332fac157c90638968586"
                }
            }
        },
        {
            "operationName": "ChannelSkins",
            "variables": {
                "channelLogin": channel
            },
            "extensions": {
                "persistedQuery": {
                    "version": 1,
                    "sha256Hash": "c63e57934d378579ccb239cd5c2bd319c0c9aa03215a68db3a5163cadcb6b15f"
                }
            }
        },
        {
            "operationName": "UseViewCount",
            "variables": {
                "channelLogin": channel
            },
            "extensions": {
                "persistedQuery": {
                    "version": 1,
                    "sha256Hash": "00b11c9c428f79ae228f30080a06ffd8226a1f068d6f52fbc057cbde66e994c2"
                }
            }
        },
    ];
    let fetchTwitchData;
    try {
        fetchTwitchData = yield fetch(`https://gql.twitch.tv/gql`, {
            method: 'POST',
            headers: Object.assign({ 'content-type': 'application/json', 'client-id': 'kimne78kx3ncx6brgo4mv6wki5h1ko' }, headers),
            body: JSON.stringify(postBody)
        });
    }
    catch (e) {
        return {
            error: 'fetch Error',
            code: 'network_error'
        };
    }
    const twitchData = yield fetchTwitchData.json();
    const streamPlaybackAccessTokenValue = (_c = (_b = (_a = twitchData[0]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.streamPlaybackAccessToken) === null || _c === void 0 ? void 0 : _c.value;
    const signature = (_f = (_e = (_d = twitchData[0]) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.streamPlaybackAccessToken) === null || _f === void 0 ? void 0 : _f.signature;
    const query = new URLSearchParams({
        acmb: "e30=",
        allow_source: "true",
        fast_bread: "true",
        p: "5118690",
        play_session_id: "3ef41eabf86f99c7ea5f91edb7d800f2",
        player_backend: "mediaplayer",
        playlist_include_framerate: "true",
        reassignments_supported: "true",
        sig: signature,
        supported_codecs: "avc1",
        token: streamPlaybackAccessTokenValue,
        transcode_mode: "cbr_v1",
        cdm: "wv",
        player_version: "1.22.0",
    });
    const m3u8Link = new URL(`https://usher.ttvnw.net/api/channel/hls/${channel}.m3u8`);
    const m3u8Url = `${m3u8Link}?${query.toString()}`;
    const user = (0, utils_1.findKey)(twitchData, 'user');
    const userId = Number((0, utils_1.findKey)(user, 'id'));
    const login = (0, utils_1.findKey)(user, 'login');
    const category = (0, utils_1.findKey)(twitchData, 'game');
    const categoryId = Number((0, utils_1.findKey)(category, 'id'));
    const categoryName = (0, utils_1.findKey)(category, 'name');
    const categoryImage = `https://static-cdn.jtvnw.net/ttv-boxart/${categoryId}-144x192.jpg`;
    const streamInfo = (0, utils_1.findKey)(twitchData, 'stream');
    const streamId = Number((0, utils_1.findKey)(streamInfo, 'id'));
    const started_at = (0, utils_1.findKey)(twitchData, 'createdAt');
    const title = (0, utils_1.findKey)(twitchData, 'title');
    const viewersCount = Number((0, utils_1.findKey)(twitchData, 'viewersCount'));
    return Object.assign({ userId,
        login,
        categoryId,
        categoryName,
        categoryImage, thumbnail: `https://static-cdn.jtvnw.net/previews-ttv/live_user_${channel}-440x248.jpg`, streamId,
        started_at,
        title,
        viewersCount,
        m3u8Url }, ((twitchData === null || twitchData === void 0 ? void 0 : twitchData.error) && twitchData));
});
exports.fetchTwitchData = fetchTwitchData;
