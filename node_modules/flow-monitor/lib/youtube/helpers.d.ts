import { FetchError, LMCategory } from '../types';
type VideoFormats = {
    itag: number;
    url: URL;
    mimeType: string;
    bitrate: number;
    width: number;
    height: number;
    lastModified: string;
    contentLength: string;
    initRange?: {
        start: string;
        end: string;
    };
    indexRange?: {
        start: string;
        end: string;
    };
    quality: "tiny" | "small" | "medium" | "hd720" | "hd1080" | "large";
    fps: number;
    qualityLabel: "144p" | "240p" | "360p" | "480p" | "720p" | "720p60" | "1080p60";
    projectionType: "RECTANGULAR";
    averageBitrate: number;
    approxDurationMs: string;
    colorInfo: {
        primaries: string;
        transferCharacteristics: string;
        matrixCoefficients: string;
    };
};
type FetchVideo = {
    liveIn?: boolean;
    status: "OK" | "ERROR";
    reason?: string;
    channelId: string;
    userIdYT: string;
    author: string;
    ownerProfileUrl: string;
    videoId: string;
    isLiveContent: boolean;
    isUnlisted: boolean;
    isPrivate: boolean;
    duration: number;
    title: string;
    views: number;
    category: LMCategory;
    publishDate: string;
    uploadDate: string;
    shortDescription: string;
    keywords: string[];
    thumbnails: {
        url: URL;
        width: number;
        height: number;
    }[];
    formats: VideoFormats[];
    adaptiveFormats: VideoFormats[];
    audioQuality?: "AUDIO_QUALITY_LOW" | "AUDIO_QUALITY_MEDIUM" | "AUDIO_QUALITY_LOW";
    audioSampleRate: string;
    audioChannels: number;
    highReplication?: true;
    loudnessDb?: number;
    baseScript: URL;
    isLive?: true;
    live?: {
        viewers: number;
        isLiveNow: boolean;
        startTimestamp: Date;
        expiresInSeconds: string;
        dashManifestUrl: URL;
        hlsManifestUrl: URL;
        latencyClass: string;
        isLowLatencyLiveStream: boolean;
    };
};
export default function fetchVideo(userId: string, headers?: HeadersInit): Promise<FetchVideo & FetchError | Partial<FetchVideo & FetchError>>;
export {};
