"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractStoryboard = void 0;
function extractStoryboard(specUrl, duration) {
    const spec = (specUrl || '').split('|').reverse();
    const baseUrl = urlOrNone(urljoin('https://i.ytimg.com/', spec.pop() || null));
    if (!baseUrl) {
        return;
    }
    const L = spec.length - 1;
    const storyboards = [];
    function reportWarning(message) {
        console.warn(`Warning: ${message}`);
    }
    for (let i = 0; i < spec.length; i++) {
        const args = spec[i].split('#').map((arg) => arg.trim());
        const counts = args.slice(0, 5).map(Number);
        if (args.length !== 8 || counts.some(isNaN) || counts.some((count) => count === 0)) {
            reportWarning(`Malformed storyboard ${i}: ${args.join('#')}`);
            continue;
        }
        const [width, height, frameCount, cols, rows] = counts;
        const [N, sigh] = args.slice(6);
        const url = baseUrl.replace('$L', (L - i).toString()).replace('$N', N) + `&sigh=${sigh}`;
        const fragmentCount = frameCount / (cols * rows);
        const fragmentDuration = duration / fragmentCount;
        const storyboard = {
            format_id: `sb${i}`,
            format_note: 'storyboard',
            ext: 'mhtml',
            protocol: 'mhtml',
            acodec: 'none',
            vcodec: 'none',
            url: url,
            width: width,
            height: height,
            fps: frameCount / duration,
            rows: rows,
            columns: cols,
            fragments: Array.from({ length: Math.ceil(fragmentCount) }, (_, j) => ({
                url: url.replace('$M', j.toString()),
                duration: Math.min(fragmentDuration, duration - (j * fragmentDuration)),
            })),
        };
        storyboards.push(storyboard);
    }
    return storyboards;
}
exports.extractStoryboard = extractStoryboard;
function isNaN(value) {
    return Number.isNaN(value);
}
function urljoin(base, path) {
    return new URL(path, base).toString();
}
function urlOrNone(url) {
    return url !== null && url !== void 0 ? url : null;
}
