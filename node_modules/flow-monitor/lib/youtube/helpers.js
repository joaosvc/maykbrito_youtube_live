"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const storyBoard_1 = require("./storyBoard");
function fetchVideo(userId, headers) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        let fetchVideoData;
        try {
            fetchVideoData = yield fetch(`https://www.youtube.com/@${userId}/live`, { cache: "no-cache" });
        }
        catch (e) {
            return {
                error: 'fetch Error',
                code: 'network_error'
            };
        }
        const videoResponseRaw = yield fetchVideoData.text();
        let ytInitialPlayerResponse;
        const videoId = (0, utils_1.getStr)(videoResponseRaw, 'https://www.youtube.com/embed/', '">');
        try {
            ytInitialPlayerResponse = JSON.parse((0, utils_1.getStr)(videoResponseRaw, `var ytInitialPlayerResponse = `, ";</script>"));
        }
        catch (e) {
            try {
                ytInitialPlayerResponse = JSON.parse((0, utils_1.getStr)(videoResponseRaw, `var ytInitialPlayerResponse = `, ";var head"));
            }
            catch (_d) {
                return {
                    liveIn: false,
                    status: 'ERROR',
                    reason: 'Channel is Offline'
                };
            }
        }
        const ytInitialData = JSON.parse((0, utils_1.getStr)(videoResponseRaw, 'var ytInitialData = ', ';</script>'));
        const { status, reason, messages } = ytInitialPlayerResponse.playabilityStatus;
        if (reason || messages) {
            return ytInitialPlayerResponse.playabilityStatus;
        }
        const storyboardSpec = (_b = (_a = ytInitialPlayerResponse === null || ytInitialPlayerResponse === void 0 ? void 0 : ytInitialPlayerResponse.storyboards) === null || _a === void 0 ? void 0 : _a.playerStoryboardSpecRenderer) === null || _b === void 0 ? void 0 : _b.spec;
        const duration = (_c = ytInitialPlayerResponse === null || ytInitialPlayerResponse === void 0 ? void 0 : ytInitialPlayerResponse.videoDetails) === null || _c === void 0 ? void 0 : _c.lengthSeconds;
        const { title, shortDescription, channelId, thumbnail: { thumbnails }, viewCount, author, lengthSeconds, isLiveContent, isLive, isPrivate, latencyClass, keywords, isLowLatencyLiveStream } = ytInitialPlayerResponse.videoDetails;
        const { uploadDate, ownerProfileUrl, isUnlisted, category: categoryName, publishDate, liveBroadcastDetails, } = ytInitialPlayerResponse.microformat.playerMicroformatRenderer;
        const { formats, adaptiveFormats, expiresInSeconds, dashManifestUrl, hlsManifestUrl } = ytInitialPlayerResponse.streamingData;
        const category_richMetadataRenderer = (0, utils_1.findKey)(ytInitialData, 'richMetadataRenderer');
        const category = {
            id: '0',
            name: categoryName,
            image: 'https://yt3.ggpht.com/QqoTjrpKRDMfGFPYpgIaTmHkbQ6Lk-brN77OxCYwl0jTtluavivXDdd4lR2wQsr_hcIggw=s136-w136-h136-c-k-c0x00ffffff-no-nd-rj'
        };
        const viewers = Number((0, utils_1.findKey)(ytInitialData, 'originalViewCount'));
        if (category_richMetadataRenderer) {
            const categoryThumbs = (0, utils_1.findKey)(category_richMetadataRenderer, 'thumbnails');
            const categoryThumbnail = categoryThumbs.pop().url;
            const categoryName = (0, utils_1.findKey)((0, utils_1.findKey)(category_richMetadataRenderer, 'title'), 'simpleText').concat(' ') + (0, utils_1.findKey)((0, utils_1.findKey)(category_richMetadataRenderer, 'subtitle'), 'simpleText');
            if (categoryName)
                category.name = categoryName;
            if (categoryThumbnail)
                category.image = categoryThumbnail;
        }
        const live = Object.assign(Object.assign({}, liveBroadcastDetails), { viewers,
            expiresInSeconds,
            dashManifestUrl,
            hlsManifestUrl,
            latencyClass,
            isLowLatencyLiveStream });
        const baseScript = `https://www.youtube.com/s/player/${(0, utils_1.getStr)(videoResponseRaw, '/s/player/', '"')}`;
        const userIdYT = ownerProfileUrl.split("/").pop();
        const storyBoard = (0, storyBoard_1.extractStoryboard)(storyboardSpec, duration);
        return Object.assign(Object.assign({ status,
            channelId,
            userIdYT,
            author,
            ownerProfileUrl,
            isLive,
            isLiveContent,
            isUnlisted,
            isPrivate,
            videoId, duration: Number(lengthSeconds), title, views: Number(viewCount), category,
            keywords,
            thumbnails,
            shortDescription,
            publishDate,
            uploadDate }, (isLive && { live })), { baseScript,
            storyBoard,
            formats,
            adaptiveFormats });
    });
}
exports.default = fetchVideo;
